
public class Manager {
	
	private Board mainBoard;
	private Board[] subBoards;
	
	private int activeBoard;
	private int activePlayer;
	
	public Manager() {
		mainBoard = new Board();
		subBoards = new Board[9];
		for(int i = 0; i < 9; i++)
			subBoards[i] = new Board();
		activeBoard = -1;
		activePlayer = 1;
	}
	
	public void click(int square) {
		if (activeBoard == -1) {	// if none of the sub boards are active
			if (mainBoard.getPlayerAt(square) == 0) {	// if this square of the main board is unoccupied
				activeBoard = square;	// make the indicated board active
			}
		} else {	// if one of the sub boards is active
			Board board = subBoards[activeBoard];	// call the sub board "board"
			if (board.claimSquare(square, activePlayer)) {	// claim the indicated square and check that it was unoccupied
				if (board.checkVictory(activePlayer)) {	// if the sub board has been won
					mainBoard.claimSquare(activeBoard, activePlayer);	// claim the main board square corresponding to the sub board
					activeBoard = -1;	// now none of the sub boards are active, need to choose one
				} else {
					toggleActivePlayer();	// switch players, only when a sub board square has been claimed and the sub board has not been won
				}
			}
		}
	}
	
	private void toggleActivePlayer() {
		activePlayer = activePlayer % 2 + 1;	// switches from player 1 to 2 and vice versa
	}
}
